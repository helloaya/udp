// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	msg.proto

It has these top-level messages:
	Command
	Pack
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command_Type int32

const (
	Command_SUBCRIBE     Command_Type = 0
	Command_SUBCRIBE_ACK Command_Type = 1
	Command_REPORT       Command_Type = 2
	Command_BYE          Command_Type = 3
)

var Command_Type_name = map[int32]string{
	0: "SUBCRIBE",
	1: "SUBCRIBE_ACK",
	2: "REPORT",
	3: "BYE",
}
var Command_Type_value = map[string]int32{
	"SUBCRIBE":     0,
	"SUBCRIBE_ACK": 1,
	"REPORT":       2,
	"BYE":          3,
}

func (x Command_Type) String() string {
	return proto.EnumName(Command_Type_name, int32(x))
}
func (Command_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Command struct {
	Type        Command_Type         `protobuf:"varint,1,opt,name=type,enum=msg.Command_Type" json:"type,omitempty"`
	Subcribe    *Command_Subcribe    `protobuf:"bytes,2,opt,name=subcribe" json:"subcribe,omitempty"`
	SubcribeAck *Command_SubcribeAck `protobuf:"bytes,3,opt,name=subcribeAck" json:"subcribeAck,omitempty"`
	Report      *Command_Report      `protobuf:"bytes,4,opt,name=report" json:"report,omitempty"`
	Bye         *Command_Bye         `protobuf:"bytes,5,opt,name=bye" json:"bye,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetType() Command_Type {
	if m != nil {
		return m.Type
	}
	return Command_SUBCRIBE
}

func (m *Command) GetSubcribe() *Command_Subcribe {
	if m != nil {
		return m.Subcribe
	}
	return nil
}

func (m *Command) GetSubcribeAck() *Command_SubcribeAck {
	if m != nil {
		return m.SubcribeAck
	}
	return nil
}

func (m *Command) GetReport() *Command_Report {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *Command) GetBye() *Command_Bye {
	if m != nil {
		return m.Bye
	}
	return nil
}

type Command_Subcribe struct {
	ClientUUID uint32 `protobuf:"varint,1,opt,name=ClientUUID" json:"ClientUUID,omitempty"`
	ResouceID  string `protobuf:"bytes,2,opt,name=ResouceID" json:"ResouceID,omitempty"`
	Start      uint32 `protobuf:"varint,3,opt,name=Start" json:"Start,omitempty"`
	End        uint32 `protobuf:"varint,4,opt,name=End" json:"End,omitempty"`
}

func (m *Command_Subcribe) Reset()                    { *m = Command_Subcribe{} }
func (m *Command_Subcribe) String() string            { return proto.CompactTextString(m) }
func (*Command_Subcribe) ProtoMessage()               {}
func (*Command_Subcribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Command_Subcribe) GetClientUUID() uint32 {
	if m != nil {
		return m.ClientUUID
	}
	return 0
}

func (m *Command_Subcribe) GetResouceID() string {
	if m != nil {
		return m.ResouceID
	}
	return ""
}

func (m *Command_Subcribe) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Command_Subcribe) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

type Command_SubcribeAck struct {
	ResouceID  string `protobuf:"bytes,1,opt,name=ResouceID" json:"ResouceID,omitempty"`
	SessionID  uint32 `protobuf:"varint,2,opt,name=SessionID" json:"SessionID,omitempty"`
	IsAccepted bool   `protobuf:"varint,3,opt,name=IsAccepted" json:"IsAccepted,omitempty"`
}

func (m *Command_SubcribeAck) Reset()                    { *m = Command_SubcribeAck{} }
func (m *Command_SubcribeAck) String() string            { return proto.CompactTextString(m) }
func (*Command_SubcribeAck) ProtoMessage()               {}
func (*Command_SubcribeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Command_SubcribeAck) GetResouceID() string {
	if m != nil {
		return m.ResouceID
	}
	return ""
}

func (m *Command_SubcribeAck) GetSessionID() uint32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Command_SubcribeAck) GetIsAccepted() bool {
	if m != nil {
		return m.IsAccepted
	}
	return false
}

type Command_Report struct {
	SessionID   uint32   `protobuf:"varint,1,opt,name=SessionID" json:"SessionID,omitempty"`
	TotalRecved uint32   `protobuf:"varint,2,opt,name=TotalRecved" json:"TotalRecved,omitempty"`
	LastRecved  uint32   `protobuf:"varint,3,opt,name=LastRecved" json:"LastRecved,omitempty"`
	Bitmap      []uint64 `protobuf:"varint,4,rep,packed,name=Bitmap" json:"Bitmap,omitempty"`
}

func (m *Command_Report) Reset()                    { *m = Command_Report{} }
func (m *Command_Report) String() string            { return proto.CompactTextString(m) }
func (*Command_Report) ProtoMessage()               {}
func (*Command_Report) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *Command_Report) GetSessionID() uint32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Command_Report) GetTotalRecved() uint32 {
	if m != nil {
		return m.TotalRecved
	}
	return 0
}

func (m *Command_Report) GetLastRecved() uint32 {
	if m != nil {
		return m.LastRecved
	}
	return 0
}

func (m *Command_Report) GetBitmap() []uint64 {
	if m != nil {
		return m.Bitmap
	}
	return nil
}

type Command_Bye struct {
	SessionID uint32 `protobuf:"varint,1,opt,name=SessionID" json:"SessionID,omitempty"`
}

func (m *Command_Bye) Reset()                    { *m = Command_Bye{} }
func (m *Command_Bye) String() string            { return proto.CompactTextString(m) }
func (*Command_Bye) ProtoMessage()               {}
func (*Command_Bye) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

func (m *Command_Bye) GetSessionID() uint32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type Pack struct {
	SessionID uint32 `protobuf:"varint,1,opt,name=SessionID" json:"SessionID,omitempty"`
	Index     uint32 `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Pack) Reset()                    { *m = Pack{} }
func (m *Pack) String() string            { return proto.CompactTextString(m) }
func (*Pack) ProtoMessage()               {}
func (*Pack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pack) GetSessionID() uint32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Pack) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Pack) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Command)(nil), "msg.Command")
	proto.RegisterType((*Command_Subcribe)(nil), "msg.Command.Subcribe")
	proto.RegisterType((*Command_SubcribeAck)(nil), "msg.Command.SubcribeAck")
	proto.RegisterType((*Command_Report)(nil), "msg.Command.Report")
	proto.RegisterType((*Command_Bye)(nil), "msg.Command.Bye")
	proto.RegisterType((*Pack)(nil), "msg.Pack")
	proto.RegisterEnum("msg.Command_Type", Command_Type_name, Command_Type_value)
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5d, 0x8b, 0xd3, 0x50,
	0x10, 0x35, 0x9b, 0x34, 0xdb, 0x4e, 0x5b, 0x89, 0xe3, 0x2a, 0xa1, 0x2c, 0x52, 0x2a, 0x42, 0x41,
	0x28, 0xb8, 0xbe, 0xe9, 0x53, 0xd3, 0xf6, 0x21, 0x28, 0xba, 0x4c, 0xdb, 0x07, 0x9f, 0xe4, 0x36,
	0x19, 0x96, 0xb0, 0x9b, 0x0f, 0x72, 0xef, 0x8a, 0x79, 0xf3, 0x37, 0xf9, 0x0b, 0x25, 0x37, 0xb7,
	0x6e, 0xb2, 0x2c, 0x7d, 0x9b, 0x39, 0xe7, 0xcc, 0x9c, 0x7b, 0x86, 0x04, 0x06, 0xa9, 0xbc, 0x59,
	0x14, 0x65, 0xae, 0x72, 0xb4, 0x53, 0x79, 0x33, 0xfb, 0xdb, 0x83, 0xf3, 0x55, 0x9e, 0xa6, 0x22,
	0x8b, 0xf1, 0x1d, 0x38, 0xaa, 0x2a, 0xd8, 0xb7, 0xa6, 0xd6, 0xfc, 0xf9, 0xd5, 0x8b, 0x45, 0x2d,
	0x35, 0xdc, 0x62, 0x57, 0x15, 0x4c, 0x9a, 0xc6, 0x0f, 0xd0, 0x97, 0xf7, 0x87, 0xa8, 0x4c, 0x0e,
	0xec, 0x9f, 0x4d, 0xad, 0xf9, 0xf0, 0xea, 0x55, 0x47, 0xba, 0x35, 0x24, 0xfd, 0x97, 0xe1, 0x27,
	0x18, 0x1e, 0xeb, 0x65, 0x74, 0xeb, 0xdb, 0x7a, 0xca, 0x7f, 0x72, 0x6a, 0x19, 0xdd, 0x52, 0x5b,
	0x8c, 0xef, 0xc1, 0x2d, 0xb9, 0xc8, 0x4b, 0xe5, 0x3b, 0x7a, 0xec, 0x65, 0x67, 0x8c, 0x34, 0x45,
	0x46, 0x82, 0x33, 0xb0, 0x0f, 0x15, 0xfb, 0x3d, 0xad, 0xf4, 0x3a, 0xca, 0xa0, 0x62, 0xaa, 0xc9,
	0x49, 0x01, 0xfd, 0xa3, 0x19, 0xbe, 0x01, 0x58, 0xdd, 0x25, 0x9c, 0xa9, 0xfd, 0x3e, 0x5c, 0xeb,
	0xe0, 0x63, 0x6a, 0x21, 0x78, 0x09, 0x03, 0x62, 0x99, 0xdf, 0x47, 0x1c, 0xae, 0x75, 0xd8, 0x01,
	0x3d, 0x00, 0x78, 0x01, 0xbd, 0xad, 0x12, 0xa5, 0xd2, 0x81, 0xc6, 0xd4, 0x34, 0xe8, 0x81, 0xbd,
	0xc9, 0x62, 0xfd, 0xda, 0x31, 0xd5, 0xe5, 0x24, 0x81, 0x61, 0x2b, 0x5e, 0x77, 0xa9, 0xf5, 0x78,
	0xe9, 0x25, 0x0c, 0xb6, 0x2c, 0x65, 0x92, 0x67, 0xc6, 0x72, 0x4c, 0x0f, 0x40, 0xfd, 0xe0, 0x50,
	0x2e, 0xa3, 0x88, 0x0b, 0xc5, 0xb1, 0xf6, 0xed, 0x53, 0x0b, 0x99, 0xfc, 0xb1, 0xc0, 0x6d, 0x6e,
	0xd2, 0x5d, 0x64, 0x3d, 0x5e, 0x34, 0x85, 0xe1, 0x2e, 0x57, 0xe2, 0x8e, 0x38, 0xfa, 0xc5, 0xb1,
	0x31, 0x6a, 0x43, 0xb5, 0xd5, 0x57, 0x21, 0x95, 0x11, 0x34, 0x11, 0x5b, 0x08, 0xbe, 0x06, 0x37,
	0x48, 0x54, 0x2a, 0x0a, 0xdf, 0x99, 0xda, 0x73, 0x87, 0x4c, 0x37, 0x79, 0x0b, 0x76, 0x50, 0xf1,
	0x69, 0xfb, 0xd9, 0x67, 0x70, 0xea, 0x4f, 0x0a, 0x47, 0xd0, 0xdf, 0xee, 0x83, 0x15, 0x85, 0xc1,
	0xc6, 0x7b, 0x86, 0x1e, 0x8c, 0x8e, 0xdd, 0xcf, 0xe5, 0xea, 0x8b, 0x67, 0x21, 0x80, 0x4b, 0x9b,
	0xeb, 0xef, 0xb4, 0xf3, 0xce, 0xf0, 0x1c, 0xec, 0xe0, 0xc7, 0xc6, 0xb3, 0x67, 0xdf, 0xc0, 0xb9,
	0x16, 0xcd, 0x21, 0x4f, 0x24, 0xbc, 0x80, 0x5e, 0x98, 0xc5, 0xfc, 0xdb, 0x64, 0x6b, 0x1a, 0x44,
	0x70, 0xd6, 0x42, 0x09, 0x9d, 0x67, 0x44, 0xba, 0x3e, 0xb8, 0xfa, 0x87, 0xf8, 0xf8, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x78, 0x0c, 0xa2, 0xa4, 0x1d, 0x03, 0x00, 0x00,
}
