// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	msg.proto

It has these top-level messages:
	ReqChan
	ReqChanAck
	Pack
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pack_Type int32

const (
	Pack_SUBCRIBE     Pack_Type = 0
	Pack_SUBCRIBE_ACK Pack_Type = 1
	Pack_REPORT       Pack_Type = 2
	Pack_BYE          Pack_Type = 3
)

var Pack_Type_name = map[int32]string{
	0: "SUBCRIBE",
	1: "SUBCRIBE_ACK",
	2: "REPORT",
	3: "BYE",
}
var Pack_Type_value = map[string]int32{
	"SUBCRIBE":     0,
	"SUBCRIBE_ACK": 1,
	"REPORT":       2,
	"BYE":          3,
}

func (x Pack_Type) String() string {
	return proto.EnumName(Pack_Type_name, int32(x))
}
func (Pack_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type ReqChan struct {
	ClientID uint32 `protobuf:"varint,1,opt,name=ClientID" json:"ClientID,omitempty"`
}

func (m *ReqChan) Reset()                    { *m = ReqChan{} }
func (m *ReqChan) String() string            { return proto.CompactTextString(m) }
func (*ReqChan) ProtoMessage()               {}
func (*ReqChan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqChan) GetClientID() uint32 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

type ReqChanAck struct {
	ClientID uint32 `protobuf:"varint,1,opt,name=ClientID" json:"ClientID,omitempty"`
	ChanID   uint32 `protobuf:"varint,2,opt,name=ChanID" json:"ChanID,omitempty"`
	ChanPort uint32 `protobuf:"varint,3,opt,name=ChanPort" json:"ChanPort,omitempty"`
}

func (m *ReqChanAck) Reset()                    { *m = ReqChanAck{} }
func (m *ReqChanAck) String() string            { return proto.CompactTextString(m) }
func (*ReqChanAck) ProtoMessage()               {}
func (*ReqChanAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReqChanAck) GetClientID() uint32 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *ReqChanAck) GetChanID() uint32 {
	if m != nil {
		return m.ChanID
	}
	return 0
}

func (m *ReqChanAck) GetChanPort() uint32 {
	if m != nil {
		return m.ChanPort
	}
	return 0
}

type Pack struct {
	Type        Pack_Type         `protobuf:"varint,1,opt,name=type,enum=msg.Pack_Type" json:"type,omitempty"`
	Subcribe    *Pack_Subcribe    `protobuf:"bytes,2,opt,name=subcribe" json:"subcribe,omitempty"`
	SubcribeAck *Pack_SubcribeAck `protobuf:"bytes,3,opt,name=subcribeAck" json:"subcribeAck,omitempty"`
	Report      *Pack_Report      `protobuf:"bytes,4,opt,name=report" json:"report,omitempty"`
	Release     *Pack_Release     `protobuf:"bytes,5,opt,name=release" json:"release,omitempty"`
	Data        *Pack_Data        `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
}

func (m *Pack) Reset()                    { *m = Pack{} }
func (m *Pack) String() string            { return proto.CompactTextString(m) }
func (*Pack) ProtoMessage()               {}
func (*Pack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pack) GetType() Pack_Type {
	if m != nil {
		return m.Type
	}
	return Pack_SUBCRIBE
}

func (m *Pack) GetSubcribe() *Pack_Subcribe {
	if m != nil {
		return m.Subcribe
	}
	return nil
}

func (m *Pack) GetSubcribeAck() *Pack_SubcribeAck {
	if m != nil {
		return m.SubcribeAck
	}
	return nil
}

func (m *Pack) GetReport() *Pack_Report {
	if m != nil {
		return m.Report
	}
	return nil
}

func (m *Pack) GetRelease() *Pack_Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *Pack) GetData() *Pack_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Pack_Subcribe struct {
	ChanID    uint32 `protobuf:"varint,1,opt,name=ChanID" json:"ChanID,omitempty"`
	ResouceID string `protobuf:"bytes,2,opt,name=ResouceID" json:"ResouceID,omitempty"`
	Start     uint32 `protobuf:"varint,3,opt,name=Start" json:"Start,omitempty"`
	End       uint32 `protobuf:"varint,4,opt,name=End" json:"End,omitempty"`
}

func (m *Pack_Subcribe) Reset()                    { *m = Pack_Subcribe{} }
func (m *Pack_Subcribe) String() string            { return proto.CompactTextString(m) }
func (*Pack_Subcribe) ProtoMessage()               {}
func (*Pack_Subcribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Pack_Subcribe) GetChanID() uint32 {
	if m != nil {
		return m.ChanID
	}
	return 0
}

func (m *Pack_Subcribe) GetResouceID() string {
	if m != nil {
		return m.ResouceID
	}
	return ""
}

func (m *Pack_Subcribe) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Pack_Subcribe) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

type Pack_SubcribeAck struct {
	ResouceID  string `protobuf:"bytes,1,opt,name=ResouceID" json:"ResouceID,omitempty"`
	SessionID  uint32 `protobuf:"varint,2,opt,name=SessionID" json:"SessionID,omitempty"`
	IsAccepted bool   `protobuf:"varint,3,opt,name=IsAccepted" json:"IsAccepted,omitempty"`
}

func (m *Pack_SubcribeAck) Reset()                    { *m = Pack_SubcribeAck{} }
func (m *Pack_SubcribeAck) String() string            { return proto.CompactTextString(m) }
func (*Pack_SubcribeAck) ProtoMessage()               {}
func (*Pack_SubcribeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *Pack_SubcribeAck) GetResouceID() string {
	if m != nil {
		return m.ResouceID
	}
	return ""
}

func (m *Pack_SubcribeAck) GetSessionID() uint32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Pack_SubcribeAck) GetIsAccepted() bool {
	if m != nil {
		return m.IsAccepted
	}
	return false
}

type Pack_Report struct {
	SessionID   uint32   `protobuf:"varint,1,opt,name=SessionID" json:"SessionID,omitempty"`
	TotalRecved uint32   `protobuf:"varint,2,opt,name=TotalRecved" json:"TotalRecved,omitempty"`
	LastRecved  uint32   `protobuf:"varint,3,opt,name=LastRecved" json:"LastRecved,omitempty"`
	Bitmap      []uint64 `protobuf:"varint,4,rep,packed,name=Bitmap" json:"Bitmap,omitempty"`
}

func (m *Pack_Report) Reset()                    { *m = Pack_Report{} }
func (m *Pack_Report) String() string            { return proto.CompactTextString(m) }
func (*Pack_Report) ProtoMessage()               {}
func (*Pack_Report) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 2} }

func (m *Pack_Report) GetSessionID() uint32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Pack_Report) GetTotalRecved() uint32 {
	if m != nil {
		return m.TotalRecved
	}
	return 0
}

func (m *Pack_Report) GetLastRecved() uint32 {
	if m != nil {
		return m.LastRecved
	}
	return 0
}

func (m *Pack_Report) GetBitmap() []uint64 {
	if m != nil {
		return m.Bitmap
	}
	return nil
}

type Pack_Release struct {
	ChanID uint32 `protobuf:"varint,1,opt,name=ChanID" json:"ChanID,omitempty"`
}

func (m *Pack_Release) Reset()                    { *m = Pack_Release{} }
func (m *Pack_Release) String() string            { return proto.CompactTextString(m) }
func (*Pack_Release) ProtoMessage()               {}
func (*Pack_Release) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 3} }

func (m *Pack_Release) GetChanID() uint32 {
	if m != nil {
		return m.ChanID
	}
	return 0
}

type Pack_Data struct {
	SessionID uint32 `protobuf:"varint,1,opt,name=SessionID" json:"SessionID,omitempty"`
	Index     uint32 `protobuf:"varint,2,opt,name=Index" json:"Index,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Pack_Data) Reset()                    { *m = Pack_Data{} }
func (m *Pack_Data) String() string            { return proto.CompactTextString(m) }
func (*Pack_Data) ProtoMessage()               {}
func (*Pack_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 4} }

func (m *Pack_Data) GetSessionID() uint32 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Pack_Data) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Pack_Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqChan)(nil), "msg.ReqChan")
	proto.RegisterType((*ReqChanAck)(nil), "msg.ReqChanAck")
	proto.RegisterType((*Pack)(nil), "msg.Pack")
	proto.RegisterType((*Pack_Subcribe)(nil), "msg.Pack.Subcribe")
	proto.RegisterType((*Pack_SubcribeAck)(nil), "msg.Pack.SubcribeAck")
	proto.RegisterType((*Pack_Report)(nil), "msg.Pack.Report")
	proto.RegisterType((*Pack_Release)(nil), "msg.Pack.Release")
	proto.RegisterType((*Pack_Data)(nil), "msg.Pack.Data")
	proto.RegisterEnum("msg.Pack_Type", Pack_Type_name, Pack_Type_value)
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0x4d, 0x8b, 0xd3, 0x50,
	0x14, 0x35, 0x93, 0x34, 0x6d, 0x6f, 0x3a, 0x43, 0xbc, 0x8c, 0x12, 0xc2, 0x20, 0x35, 0x20, 0x14,
	0x84, 0x2e, 0xea, 0xc2, 0x85, 0xab, 0xf4, 0x63, 0x11, 0x14, 0x2d, 0xb7, 0x75, 0x21, 0x08, 0xf2,
	0x9a, 0x3c, 0xa6, 0xa1, 0x6d, 0x12, 0x93, 0x37, 0xe2, 0xec, 0xfc, 0x15, 0xfe, 0x5e, 0x79, 0x2f,
	0xaf, 0x4d, 0x3a, 0xa2, 0xb3, 0x7b, 0xe7, 0x9e, 0x73, 0xbf, 0xce, 0x4d, 0xa0, 0x7f, 0xa8, 0x6e,
	0xc7, 0x45, 0x99, 0x8b, 0x1c, 0xcd, 0x43, 0x75, 0x1b, 0xbc, 0x82, 0x2e, 0xf1, 0xef, 0xb3, 0x2d,
	0xcb, 0xd0, 0x87, 0xde, 0x6c, 0x9f, 0xf2, 0x4c, 0x44, 0x73, 0xcf, 0x18, 0x1a, 0xa3, 0x4b, 0x3a,
	0xe1, 0xe0, 0x2b, 0x80, 0x96, 0x85, 0xf1, 0xee, 0x7f, 0x4a, 0x7c, 0x0e, 0xb6, 0x94, 0x45, 0x73,
	0xef, 0x42, 0x31, 0x1a, 0xa9, 0x9c, 0x2d, 0xcb, 0x96, 0x79, 0x29, 0x3c, 0x53, 0xe7, 0x68, 0x1c,
	0xfc, 0xb6, 0xc1, 0x5a, 0xb2, 0x78, 0x87, 0x01, 0x58, 0xe2, 0xbe, 0xe0, 0xaa, 0xe8, 0xd5, 0xe4,
	0x6a, 0x2c, 0x87, 0x95, 0xc4, 0x78, 0x7d, 0x5f, 0x70, 0x52, 0x1c, 0x8e, 0xa1, 0x57, 0xdd, 0x6d,
	0xe2, 0x32, 0xdd, 0x70, 0xd5, 0xc2, 0x99, 0x60, 0xa3, 0x5b, 0x69, 0x86, 0x4e, 0x1a, 0x7c, 0x0b,
	0xce, 0xf1, 0x1d, 0xc6, 0x3b, 0xd5, 0xdb, 0x99, 0x3c, 0xfb, 0x3b, 0x25, 0x8c, 0x77, 0xd4, 0x56,
	0xe2, 0x08, 0xec, 0x92, 0x17, 0x72, 0x5e, 0x4b, 0xe5, 0xb8, 0x4d, 0x0e, 0xa9, 0x38, 0x69, 0x1e,
	0x5f, 0x43, 0xb7, 0xe4, 0x7b, 0xce, 0x2a, 0xee, 0x75, 0x94, 0xf4, 0x69, 0x5b, 0xaa, 0x08, 0x3a,
	0x2a, 0xe4, 0x8e, 0x09, 0x13, 0xcc, 0xb3, 0x95, 0xb2, 0xb5, 0xe3, 0x9c, 0x09, 0x46, 0x8a, 0xf3,
	0xb7, 0xd0, 0x3b, 0x8e, 0xd5, 0x32, 0xd4, 0x38, 0x33, 0xf4, 0x06, 0xfa, 0xc4, 0xab, 0xfc, 0x2e,
	0xe6, 0xda, 0xeb, 0x3e, 0x35, 0x01, 0xbc, 0x86, 0xce, 0x4a, 0xb0, 0x93, 0xd7, 0x35, 0x40, 0x17,
	0xcc, 0x45, 0x96, 0xa8, 0x7d, 0x2e, 0x49, 0x3e, 0xfd, 0x14, 0x9c, 0x96, 0x01, 0xe7, 0x45, 0x8d,
	0x87, 0x45, 0x6f, 0xa0, 0xbf, 0xe2, 0x55, 0x95, 0xe6, 0xcd, 0x79, 0x9b, 0x00, 0xbe, 0x00, 0x88,
	0xaa, 0x30, 0x8e, 0x79, 0x21, 0x78, 0xa2, 0xfa, 0xf6, 0xa8, 0x15, 0xf1, 0x7f, 0x19, 0x60, 0xd7,
	0xc6, 0x9d, 0x17, 0x32, 0x1e, 0x16, 0x1a, 0x82, 0xb3, 0xce, 0x05, 0xdb, 0x13, 0x8f, 0x7f, 0xf0,
	0x44, 0x37, 0x6a, 0x87, 0x64, 0xab, 0x0f, 0xac, 0x12, 0x5a, 0x50, 0xaf, 0xd8, 0x8a, 0x48, 0xcf,
	0xa6, 0xa9, 0x38, 0xb0, 0xc2, 0xb3, 0x86, 0xe6, 0xc8, 0x22, 0x8d, 0xfc, 0x97, 0xf2, 0x6b, 0xaf,
	0xcf, 0xf0, 0x0f, 0x5b, 0xfd, 0x8f, 0x60, 0xc9, 0x43, 0x3c, 0x32, 0xe2, 0x35, 0x74, 0xa2, 0x2c,
	0xe1, 0x3f, 0xf5, 0x70, 0x35, 0x40, 0xac, 0x73, 0xd5, 0x40, 0x03, 0x52, 0xef, 0xe0, 0x1d, 0x58,
	0xf2, 0xe3, 0xc5, 0x01, 0xf4, 0x56, 0x9f, 0xa7, 0x33, 0x8a, 0xa6, 0x0b, 0xf7, 0x09, 0xba, 0x30,
	0x38, 0xa2, 0x6f, 0xe1, 0xec, 0xbd, 0x6b, 0x20, 0x80, 0x4d, 0x8b, 0xe5, 0x27, 0x5a, 0xbb, 0x17,
	0xd8, 0x05, 0x73, 0xfa, 0x65, 0xe1, 0x9a, 0x1b, 0x5b, 0xfd, 0xa9, 0x6f, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xa6, 0xb2, 0xfd, 0x7e, 0xb6, 0x03, 0x00, 0x00,
}
